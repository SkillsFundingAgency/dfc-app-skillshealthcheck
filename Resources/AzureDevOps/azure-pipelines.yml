variables:
  ArmTemplateRoot: '$(Build.SourcesDirectory)\Resources\ArmTemplates'
  SolutionBaseName: "DFC.App.SkillsHealthCheck"
  SolutionBaseNameApi: "DFC.SkillsCentral.Api"
  BuildPlatform: "any cpu"
  BuildConfiguration: "release"

resources:
  repositories:
    - repository: self
    - repository: dfc-devops
      type: github
      name: SkillsFundingAgency/dfc-devops
      ref: refs/tags/v1.16.0
      endpoint: "GitHub (ESFA)"

pool:
  name: NCS - CI and CD
  demands:
    - msbuild
    - visualstudio

trigger:
  branches:
    include:
      - dev
      - master

pr:
  branches:
    include:
      - dev
      - master

stages:
  - stage: Build
    displayName: Build, Test and Analyze
    jobs:
      - job: BuildTestAndAnalyze
        displayName: "Test & package ARM template(s)"
        steps:
          - template: AzureDevOpsTemplates\Build\StepTemplates\dfc-arm-build.yml@dfc-devops
            parameters:
              ArmTemplateRoot: "${{ variables.ArmTemplateRoot }}"
              SolutionBaseName: "${{ variables.SolutionBaseName }}"

          - task: PublishPipelineArtifact@1
            displayName: Publish Apim Policy
            inputs:
              targetPath: "$(Build.SourcesDirectory)/Resources/ApimPolicy"
              artifactName: ${{ variables.SolutionBaseName }}.ApimPolicies

          - task: PublishPipelineArtifact@1
            displayName: Publish OpenAPI docs to Pipeline Artifact
            inputs:
              targetPath: "$(Build.SourcesDirectory)/DFC.App.SkillsHealthCheck/OpenAPIDocs"
              artifactName: ${{ variables.SolutionBaseName }}.OpenAPIDocs

          - task: PublishPipelineArtifact@1
            displayName: Publish Powershell scripts to Pipeline Artifact
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/Resources/Scripts"
              artifactName: ${{ variables.SolutionBaseName }}.Scripts

          - task: PublishPipelineArtifact@0
            displayName: Publish Page Registration artifact
            inputs:
              targetPath: "$(Build.SourcesDirectory)/Resources/PageRegistration"
              artifactName: ${{ variables.SolutionBaseName }}.PageRegistrations

      - job: BuildDotNetCore
        displayName: Build-DotNetCore
        steps:
          - template: AzureDevOpsTemplates\Build\StepTemplates\dfc-dotnetcore-build-unit-integration-sonar.yml@dfc-devops
            parameters:
              SolutionBaseName: $(SolutionBaseName)
              BuildPlatform: $(BuildPlatform)
              BuildConfiguration: $(BuildConfiguration)
              PublishWebApp: true
              TestSuffix: UnitTests
              IntegrationTestSuffix: IntegrationTests

      - job: BuildDotNetCoreApi
        displayName: Build-DotNetCore-Api
        steps:
          - template: AzureDevOpsTemplates/Build/StepTemplates/dfc-dotnetcore-build.yml@dfc-devops
            parameters:
              SolutionBaseName: $(SolutionBaseNameApi)
              BuildPlatform: $(BuildPlatform)
              BuildConfiguration: $(BuildConfiguration)
              PublishWebApp: true
              TestSuffix: UnitTests
              IntegrationTestSuffix: IntegrationTests

  - stage: DeployToLab
    #condition: and(eq(dependencies.Build.result,'Succeeded'), or(eq(variables['Build.SourceBranch'], 'refs/heads/dev'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))) #standard condition
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: Deploy to LAB
    variables:
      - group: dfc-shared-all
      - group: dfc-shared-lab
      - group: dfc-app-shared-all
      - group: dfc-app-shared-lab
      - group: dfc-stax-shared-lab
      - group: dfc-compositeui-all
      - group: dfc-app-shared-registration
      - group: dfc-stax-shared-all
      - group: KeyVault - dfc-lab-shared-kv
      - template: VariableTemplates\LabEnvironmentVariables.yml

    jobs:
      - template: JobTemplates/deploy-environment.yml
        parameters:
          AzureSubscription: "SFA-CDH-Dev/Test (962cae10-2950-412a-93e3-d8ae92b17896)"
          EnvironmentTag: "$(EnvironmentTag)"
          ParentBusiness: "$(ParentBusiness)"
          ServiceOffering: "$(ServiceOffering)"
          ResourceGroup: $(ResourceGroup)
          DfCDevopsPath: "$(Agent.BuildDirectory)/s/dfc-devops"
          PackageFile: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.DeploymentPackages/${{ variables.SolutionBaseName }}.zip"
          ApiPackageFile: "$(Pipeline.Workspace)/${{ variables.SolutionBaseNameApi }}.DeploymentPackages/${{ variables.SolutionBaseNameApi }}.zip"
          ArmTemplateFolder: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Resources.ArmTemplates/"
          EnvironmentName: LAB_AppSkillsHealthCheck
          AppSharedResourceGroup: $(AppSharedResourceGroup)
          appSharedCosmosDBName: $(appSharedCosmosDBName)
          AppServiceName: "$(AppServiceName)"
          ApiAppServiceName: "$(ApiAppServiceName)"
          SharedResourceGroupName: $(SharedResourceGroupName)
          ApimServiceName: $(ApimServiceName)
          ApimProductInstanceName: $(ApimProductInstanceName)
          ApiName: $(ApiName)
          ApiId: $(ApiId)
          FunctionAppDomain: $(FunctionAppDomain)
          ApiDefinitionPath: $(ApiDefinitionPath)
          APIMPolicyPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.ApimPolicies/"
          ApimImportScript: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Scripts/Import-ApimOpenApiDefinitionFromFile.ps1"
          PSScriptPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Scripts"
          SpecificationPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.OpenApiDocs"
          PageRegistrationPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.PageRegistrations/"
          PageRegistrationFile: "$(PageRegistrationFile)"
          AppRegistryApiUrl: "$(AppRegistryApiUrl)"
          ApimCompositeKey: "$(ApimCompositeKey)"

  - stage: DeployToDev
    dependsOn: Build
    #condition: and(eq(dependencies.Build.result,'Succeeded'), or(eq(variables['Build.SourceBranch'], 'refs/heads/dev'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))) #standard condition
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: Deploy to DEV
    variables:
      - group: dfc-shared-all
      - group: dfc-shared-dev
      - group: dfc-app-shared-all
      - group: dfc-app-shared-dev
      - group: dfc-stax-shared-dev
      - group: dfc-compositeui-all
      - group: dfc-app-shared-registration
      - group: dfc-stax-shared-all
      - group: KeyVault - dfc-dev-shared-kv
      - template: VariableTemplates\DevEnvironmentVariables.yml

    jobs:
      - template: JobTemplates/deploy-environment.yml
        parameters:
          AzureSubscription: "SFA-CDH-Dev/Test (962cae10-2950-412a-93e3-d8ae92b17896)"
          EnvironmentTag: "$(EnvironmentTag)"
          ParentBusiness: "$(ParentBusiness)"
          ServiceOffering: "$(ServiceOffering)"
          ResourceGroup: $(ResourceGroup)
          DfCDevopsPath: "$(Agent.BuildDirectory)/s/dfc-devops"
          PackageFile: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.DeploymentPackages/${{ variables.SolutionBaseName }}.zip"
          ApiPackageFile: "$(Pipeline.Workspace)/${{ variables.SolutionBaseNameApi }}.DeploymentPackages/${{ variables.SolutionBaseNameApi }}.zip"
          ArmTemplateFolder: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Resources.ArmTemplates/"
          EnvironmentName: DEV_AppSkillsHealthCheck
          AppSharedResourceGroup: $(AppSharedResourceGroup)
          appSharedCosmosDBName: $(appSharedCosmosDBName)
          AppServiceName: "$(AppServiceName)"
          ApiAppServiceName: "$(ApiAppServiceName)"
          SharedResourceGroupName: $(SharedResourceGroupName)
          ApimServiceName: $(ApimServiceName)
          ApimProductInstanceName: $(ApimProductInstanceName)
          ApiName: $(ApiName)
          ApiId: $(ApiId)
          FunctionAppDomain: $(FunctionAppDomain)
          ApiDefinitionPath: $(ApiDefinitionPath)
          APIMPolicyPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.ApimPolicies/"
          ApimImportScript: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Scripts/Import-ApimOpenApiDefinitionFromFile.ps1"
          SpecificationPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.OpenApiDocs"
          PageRegistrationPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.PageRegistrations/"
          PageRegistrationFile: "$(PageRegistrationFile)"
          AppRegistryApiUrl: "$(AppRegistryApiUrl)"
          ApimCompositeKey: "$(ApimCompositeKey)"

  - stage: DeployToSit
    #condition: and(eq(dependencies.DeployToDev.result,'Succeeded'), or(eq(variables['Build.SourceBranch'], 'refs/heads/dev'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))) #standard condition
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: Deploy to SIT
    variables:
      - group: dfc-shared-all
      - group: dfc-shared-sit
      - group: dfc-app-shared-all
      - group: dfc-app-shared-sit
      - group: dfc-stax-shared-sit
      - group: dfc-compositeui-all
      - group: dfc-app-shared-registration
      - group: dfc-stax-shared-all
      - group: KeyVault - dfc-sit-shared-kv
      - template: VariableTemplates\SitEnvironmentVariables.yml

    jobs:
      - template: JobTemplates/deploy-environment.yml
        parameters:
          AzureSubscription: "SFA-CDH-Dev/Test (962cae10-2950-412a-93e3-d8ae92b17896)"
          EnvironmentTag: "$(EnvironmentTag)"
          ParentBusiness: "$(ParentBusiness)"
          ServiceOffering: "$(ServiceOffering)"
          ResourceGroup: $(ResourceGroup)
          DfCDevopsPath: "$(Agent.BuildDirectory)/s/dfc-devops"
          PackageFile: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.DeploymentPackages/${{ variables.SolutionBaseName }}.zip"
          ApiPackageFile: "$(Pipeline.Workspace)/${{ variables.SolutionBaseNameApi }}.DeploymentPackages/${{ variables.SolutionBaseNameApi }}.zip"
          ArmTemplateFolder: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Resources.ArmTemplates/"
          EnvironmentName: SIT_AppSkillsHealthCheck
          AppSharedResourceGroup: $(AppSharedResourceGroup)
          appSharedCosmosDBName: $(appSharedCosmosDBName)
          AppServiceName: "$(AppServiceName)"
          ApiAppServiceName: "$(ApiAppServiceName)"
          SharedResourceGroupName: $(SharedResourceGroupName)
          ApimServiceName: $(ApimServiceName)
          ApimProductInstanceName: $(ApimProductInstanceName)
          ApiName: $(ApiName)
          ApiId: $(ApiId)
          FunctionAppDomain: $(FunctionAppDomain)
          ApiDefinitionPath: $(ApiDefinitionPath)
          APIMPolicyPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.ApimPolicies/"
          ApimImportScript: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Scripts/Import-ApimOpenApiDefinitionFromFile.ps1"
          SpecificationPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.OpenApiDocs"
          PageRegistrationPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.PageRegistrations/"
          PageRegistrationFile: "$(PageRegistrationFile)"
          AppRegistryApiUrl: "$(AppRegistryApiUrl)"
          ApimCompositeKey: "$(ApimCompositeKey)"


  - stage: DeployToPP
    #condition: and(eq(dependencies.DeployToSit.result,'Succeeded'), eq(variables['Build.SourceBranch'], 'refs/heads/master')) #standard condition
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: Deploy to PP
    variables:
      - group: dfc-shared-all
      - group: dfc-shared-pp
      - group: dfc-app-shared-all
      - group: dfc-app-shared-pp
      - group: dfc-stax-shared-pp
      - group: dfc-compositeui-all
      - group: dfc-app-shared-registration
      - group: dfc-stax-shared-all
      - group: KeyVault - dfc-pp-shared-kv
      - template: VariableTemplates\PPEnvironmentVariables.yml

    jobs:
      - template: JobTemplates/deploy-environment.yml
        parameters:
          AzureSubscription: "SFA-DIG-PreProd (931bc9f6-359c-4f65-a753-1ee191a1fd6c)"
          EnvironmentTag: "$(EnvironmentTag)"
          ParentBusiness: "$(ParentBusiness)"
          ServiceOffering: "$(ServiceOffering)"
          ResourceGroup: $(ResourceGroup)
          DfCDevopsPath: "$(Agent.BuildDirectory)/s/dfc-devops"
          PackageFile: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.DeploymentPackages/${{ variables.SolutionBaseName }}.zip"
          ApiPackageFile: "$(Pipeline.Workspace)/${{ variables.SolutionBaseNameApi }}.DeploymentPackages/${{ variables.SolutionBaseNameApi }}.zip"
          ArmTemplateFolder: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Resources.ArmTemplates/"
          EnvironmentName: PP_AppSkillsHealthCheck
          AppSharedResourceGroup: $(AppSharedResourceGroup)
          appSharedCosmosDBName: $(appSharedCosmosDBName)
          AppServiceName: "$(AppServiceName)"
          ApiAppServiceName: "$(ApiAppServiceName)"
          SharedResourceGroupName: $(SharedResourceGroupName)
          ApimServiceName: $(ApimServiceName)
          ApimProductInstanceName: $(ApimProductInstanceName)
          ApiName: $(ApiName)
          ApiId: $(ApiId)
          FunctionAppDomain: $(FunctionAppDomain)
          ApiDefinitionPath: $(ApiDefinitionPath)
          APIMPolicyPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.ApimPolicies/"
          ApimImportScript: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Scripts/Import-ApimOpenApiDefinitionFromFile.ps1"
          SpecificationPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.OpenApiDocs"
          PageRegistrationPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.PageRegistrations/"
          PageRegistrationFile: "$(PageRegistrationFile)"
          AppRegistryApiUrl: "$(AppRegistryApiUrl)"
          ApimCompositeKey: "$(ApimCompositeKey)"

  - stage: DeployToProd
    #condition: and(eq(dependencies.DeployToPP.result,'Succeeded'), eq(variables['Build.SourceBranch'], 'refs/heads/master')) #standard condition
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: Deploy to Prod
    variables:
      - group: dfc-shared-all
      - group: dfc-shared-prd
      - group: dfc-app-shared-all
      - group: dfc-app-shared-prd
      - group: dfc-stax-shared-prd
      - group: dfc-compositeui-all
      - group: dfc-app-shared-registration
      - group: dfc-stax-shared-all
      - group: KeyVault - dfc-prd-shared-kv
      - template: VariableTemplates\PRDEnvironmentVariables.yml

    jobs:
      - template: JobTemplates/deploy-environment.yml
        parameters:
          AzureSubscription: "SFA-DIG-Prod (6c93f7dc-6c36-4ea6-8de3-3f4574f88027)"
          EnvironmentTag: "$(EnvironmentTag)"
          ParentBusiness: "$(ParentBusiness)"
          ServiceOffering: "$(ServiceOffering)"
          ResourceGroup: $(ResourceGroup)
          DfCDevopsPath: "$(Agent.BuildDirectory)/s/dfc-devops"
          PackageFile: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.DeploymentPackages/${{ variables.SolutionBaseName }}.zip"
          ApiPackageFile: "$(Pipeline.Workspace)/${{ variables.SolutionBaseNameApi }}.DeploymentPackages/${{ variables.SolutionBaseNameApi }}.zip"
          ArmTemplateFolder: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Resources.ArmTemplates/"
          EnvironmentName: PRD_AppSkillsHealthCheck
          AppSharedResourceGroup: $(AppSharedResourceGroup)
          appSharedCosmosDBName: $(appSharedCosmosDBName)
          AppServiceName: "$(AppServiceName)"
          ApiAppServiceName: "$(ApiAppServiceName)"
          SharedResourceGroupName: $(SharedResourceGroupName)
          ApimServiceName: $(ApimServiceName)
          ApimProductInstanceName: $(ApimProductInstanceName)
          ApiName: $(ApiName)
          ApiId: $(ApiId)
          FunctionAppDomain: $(FunctionAppDomain)
          ApiDefinitionPath: $(ApiDefinitionPath)
          APIMPolicyPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.ApimPolicies/"
          ApimImportScript: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.Scripts/Import-ApimOpenApiDefinitionFromFile.ps1"
          SpecificationPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.OpenApiDocs"
          PageRegistrationPath: "$(Pipeline.Workspace)/${{ variables.SolutionBaseName }}.PageRegistrations/"
          PageRegistrationFile: "$(PageRegistrationFile)"
          AppRegistryApiUrl: "$(AppRegistryApiUrl)"
          ApimCompositeKey: "$(ApimCompositeKey)"
